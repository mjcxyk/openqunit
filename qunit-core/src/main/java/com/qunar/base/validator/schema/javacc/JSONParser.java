package com.qunar.base.validator.schema.javacc;///* Generated By:JavaCC: Do not edit this line. JSONParser.java */
//package com.qunar.base.validator.schema.javacc;
////
//
//import org.apache.commons.lang.StringUtils;
//
//import java.io.StringReader;
//import java.util.Map;
//import java.util.HashMap;
//import java.util.List;
//import java.util.ArrayList;
//import com.qunar.base.validator.util.JsonStringUtil;
//import com.qunar.base.validator.schema.*;
//import java.math.BigDecimal;
//
////
//public class JSONParser implements JSONParserConstants {
//  public JSONParser(){
//    this (new StringReader(""));
//  }
//  public Schema parser(String json)throws ParseException{
//    if(StringUtils.isBlank(json)){
//       return new PureValueSchema(null);
//    }
//    ReInit(new StringReader(json));
//    return object();
//  }
//
///** */
//  final public Schema object() throws ParseException {
//  Schema schema;
//    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
//    case 19:
//      schema = objectSchema();
//      break;
//    case TRUE:
//    case FALSE:
//    case NULL:
//    case INTEGER_LITERAL:
//    case FLOATING_POINT_LITERAL:
//    case STRING_LITERAL:
//      schema = pureValueSchema();
//      break;
//    case 25:
//      schema = arraySchema();
//      break;
//    default:
//      jj_la1[0] = jj_gen;
//      jj_consume_token(-1);
//      throw new ParseException();
//    }
//    {if (true) return schema;}
//    throw new Error("Missing return statement in function");
//  }
//
//  final public Schema objectSchema() throws ParseException {
//  ObjectRuleSchema schema = new ObjectRuleSchema();
//  String key;
//  Map<String,Object> valueattr = new HashMap<String,Object>();
//    jj_consume_token(19);
//    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
//    case STRING_LITERAL:
//    case ID:
//      key = key();
//      jj_consume_token(20);
//      valueattr = valueattr();
//      Schema s = (Schema)valueattr.get("value");
//      if(s==null)
//      {
//        s = new PureValueSchema(new Any());
//      }
//      s.setAttrRule((List)valueattr.get("attr"));
//      schema.addSchema(key,s);
////    schema.setAttrRule((List)valueattr.get("attr"));
//
//      break;
//    default:
//      jj_la1[1] = jj_gen;
//      ;
//    }
//    label_1:
//    while (true) {
//      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
//      case 21:
//        ;
//        break;
//      default:
//        jj_la1[2] = jj_gen;
//        break label_1;
//      }
//      jj_consume_token(21);
//      key = key();
//      jj_consume_token(20);
//      valueattr = valueattr();
//    schema.addSchema(key,(Schema)valueattr.get("value"));
//      Schema s = (Schema)valueattr.get("value");
//      if(s==null)
//      {
//        s = new PureValueSchema(new Any());
//      }
//      s.setAttrRule((List)valueattr.get("attr"));
//      schema.addSchema(key,s);
////    schema.setAttrRule((List)valueattr.get("attr"));
//
//    }
//    jj_consume_token(22);
//    {if (true) return schema;}
//    throw new Error("Missing return statement in function");
//  }
//
//  final public Schema pureValueSchema() throws ParseException {
//  Object value;
//  PureValueSchema valueSchema;
//    value = value();
//  valueSchema = new PureValueSchema(value);
//  {if (true) return valueSchema;}
//    throw new Error("Missing return statement in function");
//  }
//
//  final public Map valueattr() throws ParseException {
//  Object value;
//  Attr attr;
//  List<Attr> attrs = new ArrayList<Attr>();
//  Map map = new HashMap();
//    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
//    case TRUE:
//    case FALSE:
//    case NULL:
//    case INTEGER_LITERAL:
//    case FLOATING_POINT_LITERAL:
//    case STRING_LITERAL:
//    case IDENT:
//    case 19:
//    case 25:
//      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
//      case TRUE:
//      case FALSE:
//      case NULL:
//      case INTEGER_LITERAL:
//      case FLOATING_POINT_LITERAL:
//      case STRING_LITERAL:
//      case 19:
//      case 25:
//        value = schemaValue();
//                       map.put("value",value);
//        break;
//      case IDENT:
//        attr = attr();
//                                                            attrs.add(attr);
//        break;
//      default:
//        jj_la1[3] = jj_gen;
//        jj_consume_token(-1);
//        throw new ParseException();
//      }
//      break;
//    default:
//      jj_la1[4] = jj_gen;
//      ;
//    }
//    label_2:
//    while (true) {
//      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
//      case 20:
//        ;
//        break;
//      default:
//        jj_la1[5] = jj_gen;
//        break label_2;
//      }
//      jj_consume_token(20);
//      attr = attr();
//                                                                                               attrs.add(attr);
//    }
//    map.put("attr",attrs);
//    {if (true) return map;}
//    throw new Error("Missing return statement in function");
//  }
//
//  final public Attr attr() throws ParseException {
//  String name=null;
//  List arg=null;
//    name = ident();
//    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
//    case 23:
//      arg = arguments();
//      break;
//    default:
//      jj_la1[6] = jj_gen;
//      ;
//    }
//                                     {if (true) return new Attr(name,arg);}
//    throw new Error("Missing return statement in function");
//  }
//
//  final public String ident() throws ParseException {
//  Token value;
//    value = jj_consume_token(IDENT);
//                   {if (true) return value.image;}
//    throw new Error("Missing return statement in function");
//  }
//
//  final public List arguments() throws ParseException {
//  List list = new ArrayList();
//  Object obj;
//    jj_consume_token(23);
//    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
//    case TRUE:
//    case FALSE:
//    case NULL:
//    case INTEGER_LITERAL:
//    case FLOATING_POINT_LITERAL:
//    case STRING_LITERAL:
//      obj = arg();
//                   list.add(obj);
//      break;
//    default:
//      jj_la1[7] = jj_gen;
//      ;
//    }
//    label_3:
//    while (true) {
//      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
//      case 21:
//        ;
//        break;
//      default:
//        jj_la1[8] = jj_gen;
//        break label_3;
//      }
//      jj_consume_token(21);
//      obj = arg();
//                                                     list.add(obj);
//    }
//    jj_consume_token(24);
//    {if (true) return list;}
//    throw new Error("Missing return statement in function");
//  }
//
//  final public Object arg() throws ParseException {
//  Object obj;
//    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
//    case INTEGER_LITERAL:
//    case FLOATING_POINT_LITERAL:
//      obj = number();
//      break;
//    case STRING_LITERAL:
//      obj = string();
//      break;
//    case TRUE:
//      jj_consume_token(TRUE);
//            obj = true;
//      break;
//    case FALSE:
//      jj_consume_token(FALSE);
//             obj = false;
//      break;
//    case NULL:
//      jj_consume_token(NULL);
//            obj = null;
//      break;
//    default:
//      jj_la1[9] = jj_gen;
//      jj_consume_token(-1);
//      throw new ParseException();
//    }
//    {if (true) return obj;}
//    throw new Error("Missing return statement in function");
//  }
//
///** */
//  final public String key() throws ParseException {
//  Token t;
//  String value;
//    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
//    case ID:
//      t = jj_consume_token(ID);
//            {if (true) return t.image;}
//      break;
//    case STRING_LITERAL:
//      value = string();
//                                                 {if (true) return value;}
//      break;
//    default:
//      jj_la1[10] = jj_gen;
//      jj_consume_token(-1);
//      throw new ParseException();
//    }
//    throw new Error("Missing return statement in function");
//  }
//
///** */
//  final public Number number() throws ParseException {
//  Token t;
//    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
//    case INTEGER_LITERAL:
//      t = jj_consume_token(INTEGER_LITERAL);
//    {if (true) return new BigDecimal(t.image);}
////    char lastChar = t.image.charAt(t.image.length()-1);
////    if (lastChar == 'l' || lastChar == 'L'){
////      return Long.parseLong(t.image);
////    } else {
////      try
////      {
////         return Integer.parseInt(t.image);
////      }catch(NumberFormatException nfe){
////        return Long.parseLong(t.image);
////      }
////    }
//
//      break;
//    case FLOATING_POINT_LITERAL:
//      t = jj_consume_token(FLOATING_POINT_LITERAL);
//    {if (true) return new BigDecimal(t.image);}
////    lastChar = t.image.charAt(t.image.length()-1);
////    if (lastChar == 'f' || lastChar == 'F'){
////      return Float.parseFloat(t.image);
////    } else {
////      return Double.parseDouble(t.image);
////    }
//
//      break;
//    default:
//      jj_la1[11] = jj_gen;
//      jj_consume_token(-1);
//      throw new ParseException();
//    }
//    throw new Error("Missing return statement in function");
//  }
//
///** */
//  final public String string() throws ParseException {
//  Token t;
//    t = jj_consume_token(STRING_LITERAL);
//    {if (true) return JsonStringUtil.restoreJsonString(t.image.substring(1, t.image.length()-1));}
//    throw new Error("Missing return statement in function");
//  }
//
///** */
//  final public Schema schemaValue() throws ParseException {
//  Schema schema;
//    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
//    case TRUE:
//    case FALSE:
//    case NULL:
//    case INTEGER_LITERAL:
//    case FLOATING_POINT_LITERAL:
//    case STRING_LITERAL:
//      schema = pureValueSchema();
//      break;
//    case 25:
//      schema = arraySchema();
//      break;
//    case 19:
//      schema = object();
//      break;
//    default:
//      jj_la1[12] = jj_gen;
//      jj_consume_token(-1);
//      throw new ParseException();
//    }
//    {if (true) return schema;}
//    throw new Error("Missing return statement in function");
//  }
//
//  final public Object value() throws ParseException {
//  Object obj;
//    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
//    case STRING_LITERAL:
//      obj = string();
//      break;
//    case INTEGER_LITERAL:
//    case FLOATING_POINT_LITERAL:
//      obj = number();
//      break;
//    case TRUE:
//      jj_consume_token(TRUE);
//            obj = true;
//      break;
//    case FALSE:
//      jj_consume_token(FALSE);
//             obj = false;
//      break;
//    case NULL:
//      jj_consume_token(NULL);
//            obj = null;
//      break;
//    default:
//      jj_la1[13] = jj_gen;
//      jj_consume_token(-1);
//      throw new ParseException();
//    }
//    {if (true) return obj;}
//    throw new Error("Missing return statement in function");
//  }
//
///** */
//  final public List<Schema> array() throws ParseException {
//  List<Schema > list = new ArrayList<Schema >();
//  Schema obj;
//    jj_consume_token(25);
//    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
//    case TRUE:
//    case FALSE:
//    case NULL:
//    case INTEGER_LITERAL:
//    case FLOATING_POINT_LITERAL:
//    case STRING_LITERAL:
//    case 19:
//    case 25:
//      obj = schemaValue();
//                           list.add(obj);
//      break;
//    default:
//      jj_la1[14] = jj_gen;
//      ;
//    }
//    label_4:
//    while (true) {
//      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
//      case 21:
//        ;
//        break;
//      default:
//        jj_la1[15] = jj_gen;
//        break label_4;
//      }
//      jj_consume_token(21);
//      obj = schemaValue();
//                                                                     list.add(obj);
//    }
//    jj_consume_token(26);
//    {if (true) return list;}
//    throw new Error("Missing return statement in function");
//  }
//
//  final public Schema arraySchema() throws ParseException {
//  List<Schema > list = new ArrayList<Schema >();
//  Schema obj;
//  Schema ars;
//    jj_consume_token(25);
//    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
//    case TRUE:
//    case FALSE:
//    case NULL:
//    case INTEGER_LITERAL:
//    case FLOATING_POINT_LITERAL:
//    case STRING_LITERAL:
//    case 19:
//    case 25:
//      obj = schemaValue();
//                           list.add(obj);
//      break;
//    default:
//      jj_la1[16] = jj_gen;
//      ;
//    }
//    label_5:
//    while (true) {
//      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
//      case 21:
//        ;
//        break;
//      default:
//        jj_la1[17] = jj_gen;
//        break label_5;
//      }
//      jj_consume_token(21);
//      obj = schemaValue();
//                                                                     list.add(obj);
//    }
//    jj_consume_token(26);
//    ars = new ArrayRuleSchema(list);
//    {if (true) return ars;}
//    throw new Error("Missing return statement in function");
//  }
//
//  /** Generated Token Manager. */
//  public JSONParserTokenManager token_source;
//  SimpleCharStream jj_input_stream;
//  /** Current token. */
//  public Token token;
//  /** Next token. */
//  public Token jj_nt;
//  private int jj_ntk;
//  private int jj_gen;
//  final private int[] jj_la1 = new int[18];
//  static private int[] jj_la1_0;
//  static {
//      jj_la1_init_0();
//   }
//   private static void jj_la1_init_0() {
//      jj_la1_0 = new int[] {0x20851e0,0x14000,0x200000,0x208d1e0,0x208d1e0,0x100000,0x800000,0x51e0,0x200000,0x51e0,0x14000,0x1100,0x20851e0,0x51e0,0x20851e0,0x200000,0x20851e0,0x200000,};
//   }
//
//  /** Constructor with InputStream. */
//  public JSONParser(java.io.InputStream stream) {
//     this(stream, null);
//  }
//  /** Constructor with InputStream and supplied encoding */
//  public JSONParser(java.io.InputStream stream, String encoding) {
//    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
//    token_source = new JSONParserTokenManager(jj_input_stream);
//    token = new Token();
//    jj_ntk = -1;
//    jj_gen = 0;
//    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
//  }
//
//  /** Reinitialise. */
//  public void ReInit(java.io.InputStream stream) {
//     ReInit(stream, null);
//  }
//  /** Reinitialise. */
//  public void ReInit(java.io.InputStream stream, String encoding) {
//    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
//    token_source.ReInit(jj_input_stream);
//    token = new Token();
//    jj_ntk = -1;
//    jj_gen = 0;
//    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
//  }
//
//  /** Constructor. */
//  public JSONParser(java.io.Reader stream) {
//    jj_input_stream = new SimpleCharStream(stream, 1, 1);
//    token_source = new JSONParserTokenManager(jj_input_stream);
//    token = new Token();
//    jj_ntk = -1;
//    jj_gen = 0;
//    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
//  }
//
//  /** Reinitialise. */
//  public void ReInit(java.io.Reader stream) {
//    jj_input_stream.ReInit(stream, 1, 1);
//    token_source.ReInit(jj_input_stream);
//    token = new Token();
//    jj_ntk = -1;
//    jj_gen = 0;
//    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
//  }
//
//  /** Constructor with generated Token Manager. */
//  public JSONParser(JSONParserTokenManager tm) {
//    token_source = tm;
//    token = new Token();
//    jj_ntk = -1;
//    jj_gen = 0;
//    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
//  }
//
//  /** Reinitialise. */
//  public void ReInit(JSONParserTokenManager tm) {
//    token_source = tm;
//    token = new Token();
//    jj_ntk = -1;
//    jj_gen = 0;
//    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
//  }
//
//  private Token jj_consume_token(int kind) throws ParseException {
//    Token oldToken;
//    if ((oldToken = token).next != null) token = token.next;
//    else token = token.next = token_source.getNextToken();
//    jj_ntk = -1;
//    if (token.kind == kind) {
//      jj_gen++;
//      return token;
//    }
//    token = oldToken;
//    jj_kind = kind;
//    throw generateParseException();
//  }
//
//
///** Get the next Token. */
//  final public Token getNextToken() {
//    if (token.next != null) token = token.next;
//    else token = token.next = token_source.getNextToken();
//    jj_ntk = -1;
//    jj_gen++;
//    return token;
//  }
//
///** Get the specific Token. */
//  final public Token getToken(int index) {
//    Token t = token;
//    for (int i = 0; i < index; i++) {
//      if (t.next != null) t = t.next;
//      else t = t.next = token_source.getNextToken();
//    }
//    return t;
//  }
//
//  private int jj_ntk() {
//    if ((jj_nt=token.next) == null)
//      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
//    else
//      return (jj_ntk = jj_nt.kind);
//  }
//
//  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
//  private int[] jj_expentry;
//  private int jj_kind = -1;
//
//  /** Generate ParseException. */
//  public ParseException generateParseException() {
//    jj_expentries.clear();
//    boolean[] la1tokens = new boolean[27];
//    if (jj_kind >= 0) {
//      la1tokens[jj_kind] = true;
//      jj_kind = -1;
//    }
//    for (int i = 0; i < 18; i++) {
//      if (jj_la1[i] == jj_gen) {
//        for (int j = 0; j < 32; j++) {
//          if ((jj_la1_0[i] & (1<<j)) != 0) {
//            la1tokens[j] = true;
//          }
//        }
//      }
//    }
//    for (int i = 0; i < 27; i++) {
//      if (la1tokens[i]) {
//        jj_expentry = new int[1];
//        jj_expentry[0] = i;
//        jj_expentries.add(jj_expentry);
//      }
//    }
//    int[][] exptokseq = new int[jj_expentries.size()][];
//    for (int i = 0; i < jj_expentries.size(); i++) {
//      exptokseq[i] = jj_expentries.get(i);
//    }
//    return new ParseException(token, exptokseq, tokenImage);
//  }
//
//  /** Enable tracing. */
//  final public void enable_tracing() {
//  }
//
//  /** Disable tracing. */
//  final public void disable_tracing() {
//  }
//
//}
