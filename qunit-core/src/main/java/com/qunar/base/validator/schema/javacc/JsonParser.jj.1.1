options{  
  JDK_VERSION = "1.5";  
  UNICODE_INPUT = true;  
  STATIC = false;  
}  
PARSER_BEGIN(JSONParser)  
package com.qunar.base.validator.schema.javacc;
//  
import java.io.StringReader;  
import java.util.Map;  
import java.util.HashMap;  
import java.util.List;  
import java.util.ArrayList;
import com.qunar.base.validator.util.JsonStringUtil;
import com.qunar.base.validator.schema.*;

//  
public class JSONParser{  
  public JSONParser(){  
    this (new StringReader(""));  
  }  
  public Schema parser(String json)throws ParseException{  
    ReInit(new StringReader(json));  
    return object();  
  }  
}  
PARSER_END(JSONParser)  
SKIP:{  
  " " | "\r" | "\t" | "\n"  
}  
TOKEN:/* LITERALS */  
{  
  <TRUE:"true">  
  | <FALSE:"false">  
  | <NULL:"null">  
  | <INTEGER_LITERAL:("-")?<DECIMAL_LITERAL>(["l", "L"])?  
  | <HEX_LITERAL>(["l", "L"])?  
  | <OCTAL_LITERAL>(["l", "L"])?>  
  | <#DECIMAL_LITERAL:("-")?["1"-"9"](["0"-"9"])*>  
  | <#HEX_LITERAL:"0"["x", "X"](["0"-"9", "a"-"f", "A"-"F"])+>  
  | <#OCTAL_LITERAL:"0"(["0"-"7"])*>  
  | <FLOATING_POINT_LITERAL:(["0"-"9"])+"."(["0"-"9"])*(<EXPONENT>)?(["f", "F", "d", "D"])?  
  | "."(["0"-"9"])+(<EXPONENT>)?(["f", "F", "d", "D"])?  
  | (["0"-"9"])+<EXPONENT>(["f", "F", "d", "D"])?  
  | (["0"-"9"])+(<EXPONENT>)?["f", "F", "d", "D"]>  
  | <#EXPONENT:["e", "E"](["+", "-"])?(["0"-"9"])+>  
  | <STRING_LITERAL:("\""((~["\"", "\\", "\n", "\r"])  
  | ("\\"(["n", "t", "b", "r", "f", "\\", "'", "\""]  
  | ["0"-"7"](["0"-"7"])?  
  | ["0"-"3"]["0"-"7"]["0"-"7"])))*"\"")  
  | ("'"((~["\'", "\\", "\n", "\r"])  
  | ("\\"(["n", "t", "b", "r", "f", "\\", "'", "\""]  
  | ["0"-"7"](["0"-"7"])?  
  | ["0"-"3"]["0"-"7"]["0"-"7"])))*"'")>
  | <IDENT:(["a"-"z","A"-"Z"])*>
}


TOKEN:/* IDENTIFIERS */  
{  
  <ID:<LETTER>(<LETTER>  
  | <DIGIT>)*>  
  | <#LETTER:["\u0024", "\u0041"-"\u005a", "\u005f", "\u0061"-"\u007a", "\u00c0"-"\u00d6", "\u00d8"-"\u00f6", "\u00f8"-"\u00ff", "\u0100"-"\u1fff", "\u3040"-"\u318f", "\u3300"-"\u337f", "\u3400"-"\u3d2d", "\u4e00"-"\u9fff", "\uf900"-"\ufaff"]>  
  | <#DIGIT:["\u0030"-"\u0039", "\u0660"-"\u0669", "\u06f0"-"\u06f9", "\u0966"-"\u096f", "\u09e6"-"\u09ef", "\u0a66"-"\u0a6f", "\u0ae6"-"\u0aef", "\u0b66"-"\u0b6f", "\u0be7"-"\u0bef", "\u0c66"-"\u0c6f", "\u0ce6"-"\u0cef", "\u0d66"-"\u0d6f", "\u0e50"-"\u0e59", "\u0ed0"-"\u0ed9", "\u1040"-"\u1049"]>  
}  
/** */  
Schema object():{  
  Schema schema;
}  
{
  (schema=objectSchema()|schema=pureValueSchema()|schema=arraySchema()){
    return schema;  
  }  
}

Schema objectSchema():
{
  ObjectRuleSchema schema = new ObjectRuleSchema();
  String key;  
  Map<String,Object> valueattr = new HashMap<String,Object>();
}
{
  (
    "{"(key = key()":"valueattr=valueattr(){
    schema.addSchema(key,(Schema)valueattr.get("value"));
    schema.setAttrRule((List)valueattr.get("attr"));
  }
  )?(","(key = key()":"valueattr=valueattr(){
    schema.addSchema(key,(Schema)valueattr.get("value"));
    schema.setAttrRule((List)valueattr.get("attr"));
  }  
  ))*"}"){  
    return schema;  
  }  
}

Schema pureValueSchema():
{
  Object value;
  PureValueSchema valueSchema;
}
{
value=value()
{
  valueSchema = new PureValueSchema(value);
  return valueSchema;
}
}

Map valueattr():
{
  Object value;
  Attr attr;
  List<Attr> attrs = new ArrayList<Attr>();
  Map map = new HashMap();
}
{
  (value=schemaValue(){map.put("value",value);}|attr=attr(){attrs.add(attr);})?(":"attr=attr(){attrs.add(attr);})*
  {
    map.put("attr",attrs);
    return map;
  }
}

Attr attr():{
  String name=null;
  List arg=null;
}
{
    (name=ident()(arg=arguments())? {return new Attr(name,arg);})   
}

String ident():{
  Token value;
}
{
  value = <IDENT>{ return value.image;}
}

List arguments():{
  List list = new ArrayList();
  Object obj;
}
{
  "("(obj = arg(){ list.add(obj);})?(","obj = arg(){ list.add(obj);})*")"{
    return list;
   }
}

Object arg():{  
  Object obj;  
}  
{  
  (obj = number() 
  | obj = string()  
  | <TRUE>{ obj = true;}  
  | <FALSE>{ obj = false;}  
  | <NULL>{ obj = null;}  
  ){
    return obj;  
  }
}


/** */  
String key():{  
  Token t;  
  String value;  
}  
{  
  t = <ID>{ return t.image;} | value = string(){ return value;}  
}  
/** */  
Number number():{  
  Token t;  
}  
{  
  t = <INTEGER_LITERAL>{  
    char lastChar = t.image.charAt(t.image.length()-1);  
    if (lastChar == 'l' || lastChar == 'L'){  
      return Long.parseLong(t.image);  
    } else {
      try      {
         return Integer.parseInt(t.image);
      }catch(NumberFormatException nfe){
        return Long.parseLong(t.image);      }  
    }  
  }  
  | t = <FLOATING_POINT_LITERAL>{  
    lastChar = t.image.charAt(t.image.length()-1);  
    if (lastChar == 'f' || lastChar == 'F'){  
      return Float.parseFloat(t.image);  
    } else {  
      return Double.parseDouble(t.image);  
    }  
  }  
}  
/** */  
String string():{  
  Token t;  
}  
{  
  t = <STRING_LITERAL>{  
    return JsonStringUtil.restoreJsonString(t.image.substring(1, t.image.length()-1));
  }  
}  
/** */

Schema schemaValue():{  
  Schema schema;  
}  
{  
  (schema = pureValueSchema()  
  | schema = arraySchema()
  | schema = object()
  ){
    return schema;
  }
}

Object value():{  
  Object obj;  
}  
{  
  (obj = string()  
  | obj = number()  
  | <TRUE>{ obj = true;}  
  | <FALSE>{ obj = false;}  
  | <NULL>{ obj = null;}  
  ){
    return obj;  
  }
}
/** */  
List<Schema> array():{  
  List<Schema > list = new ArrayList<Schema >();  
  Schema obj;  
}  
{  
  "["(obj = schemaValue(){ list.add(obj);})?(","obj = schemaValue(){ list.add(obj);})*"]"{  
    return list;  
  }  
}

Schema arraySchema():{  
  List<Schema > list = new ArrayList<Schema >();  
  Schema obj;
  Schema ars;
}  
{  
  "["(obj = schemaValue(){ list.add(obj);})?(","obj = schemaValue(){ list.add(obj);})*"]"{  
    ars = new ArrayRuleSchema(list);
    return ars;
  }  
}
